generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Address {
  id        Int      @id @unique(map: "Address_id_key") @default(autoincrement()) @db.UnsignedInt
  userId    Int      @db.UnsignedInt
  name      String
  province  String
  city      String
  county    String
  address   String
  phone     String
  isDefault Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     Users    @relation(fields: [userId], references: [id], map: "Address_userId_fkey")
  orders    Orders[]

  @@index([userId], map: "Address_userId_fkey")
}

model Cart {
  id        Int      @id @unique(map: "Cart_id_key") @default(autoincrement()) @db.UnsignedInt
  userId    Int      @db.UnsignedInt
  goodId    Int      @db.UnsignedInt
  num       Int?     @default(1)
  isChecked Int?     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  goods     Goods    @relation(fields: [goodId], references: [id], map: "Cart_goodId_fkey")
  users     Users    @relation(fields: [userId], references: [id], map: "Cart_userId_fkey")

  @@index([goodId], map: "Cart_goodId_fkey")
  @@index([userId], map: "Cart_userId_fkey")
}

model Categories {
  id        Int      @id @unique(map: "Categories_id_key") @default(autoincrement()) @db.UnsignedInt
  name      String   @db.VarChar(255)
  pid       Int
  status    Int      @default(0)
  level     Int
  group     String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  goods     Goods[]
}

model Comments {
  id        Int      @id @unique(map: "Comments_id_key") @default(autoincrement())
  userId    Int      @db.UnsignedInt
  orderId   Int      @db.UnsignedInt
  goodId    Int      @db.UnsignedInt
  content   String
  rate      Int?     @default(1) @db.UnsignedInt
  star      Int?     @default(5) @db.UnsignedInt
  reply     String?
  pics      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  goods     Goods    @relation(fields: [goodId], references: [id], map: "Comments_goodId_fkey")
  orders    Orders   @relation(fields: [orderId], references: [id], map: "Comments_orderId_fkey")
  users     Users    @relation(fields: [userId], references: [id], map: "Comments_userId_fkey")

  @@index([goodId], map: "Comments_goodId_fkey")
  @@index([orderId], map: "Comments_orderId_fkey")
  @@index([userId], map: "Comments_userId_fkey")
}

model Goods {
  id           Int            @id @unique(map: "Goods_id_key") @default(autoincrement()) @db.UnsignedInt
  userId       Int            @db.UnsignedInt
  categoryId   Int            @db.UnsignedInt
  title        String         @db.VarChar(255)
  description  String         @db.VarChar(255)
  price        Float
  stock        Int
  cover        String         @db.VarChar(255)
  pics         Json?
  details      String         @db.Text
  sales        Int?           @default(0)
  isOn         Int?           @default(0)
  isRecommend  Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  categories   Categories     @relation(fields: [categoryId], references: [id], map: "Goods_categoryId_fkey")
  users        Users          @relation(fields: [userId], references: [id], map: "Goods_userId_fkey")
  cart         Cart[]
  comments     Comments[]
  orderDetails OrderDetails[]

  @@index([categoryId], map: "Goods_categoryId_fkey")
  @@index([userId], map: "Goods_userId_fkey")
}

model OrderDetails {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  orderId   Int      @unique(map: "OrderDetails_orderId_key") @db.UnsignedInt
  goodId    Int      @db.UnsignedInt
  price     Float
  num       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  goods     Goods    @relation(fields: [goodId], references: [id], map: "OrderDetails_goodId_fkey")
  orders    Orders   @relation(fields: [orderId], references: [id], map: "OrderDetails_orderId_fkey")

  @@index([goodId], map: "OrderDetails_goodId_fkey")
}

model Orders {
  id           Int           @id @unique(map: "Orders_id_key") @default(autoincrement()) @db.UnsignedInt
  userId       Int           @db.UnsignedInt
  orderNo      String
  amount       Float
  addressId    Int           @db.UnsignedInt
  status       Int?
  expressType  String?
  expressNo    String?
  payTime      DateTime?
  payType      String?
  tradNo       String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  address      Address       @relation(fields: [addressId], references: [id], map: "Orders_addressId_fkey")
  users        Users         @relation(fields: [userId], references: [id], map: "Orders_userId_fkey")
  comments     Comments[]
  orderDetails OrderDetails?

  @@index([addressId], map: "Orders_addressId_fkey")
  @@index([userId], map: "Orders_userId_fkey")
}

model Slides {
  id        Int      @id @unique(map: "Slides_id_key") @default(autoincrement()) @db.UnsignedInt
  title     String
  img       String
  url       String?
  status    Int?     @default(0)
  seq       Int?     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Users {
  id        Int        @id @unique(map: "Users_id_key") @default(autoincrement()) @db.UnsignedInt
  name      String     @db.VarChar(255)
  email     String     @unique(map: "Users_email_key") @db.VarChar(255)
  password  String     @db.VarChar(255)
  phone     String?    @unique(map: "Users_phone_key") @db.VarChar(255)
  avatar    String?    @db.VarChar(255)
  is_locked Int?       @default(0) @db.UnsignedInt
  role      String?    @default("user")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  address   Address[]
  cart      Cart[]
  comments  Comments[]
  goods     Goods[]
  orders    Orders[]
}
